package model;

import java.util.ArrayList;

import view.KWIC;

/* Circular Shift filter: repeatedly removes the first word and appends it at the end of the line.*/
public class CircularShift extends Filter {

    // Create object to pass data through pipe to Alphabetizer filter
    Alphabetizer output = new Alphabetizer();

    // Output output = new Output();

    // Create Array List that will dynamically hold all the lines generated by
    // transform()
    ArrayList<String> linesList = new ArrayList<String>();

    @Override
    // read input sent through pipe
    public void read(String[] lines, KWIC panel) {
        // break down line into word array and call transform()
        for (int i = 0; i < lines.length; i++) {
            String[] words = lines[i].split(" ");
            for (int j = 0; j < words.length; j++) {
                transform(words, panel);
            }
        }

        // once transformations are done, call write() to send data through pipe
        write(lines, panel);

    }

    @Override
    // transform data by circularly shifting each word in line
    public void transform(String[] words, KWIC panel) {

        // save word in first element to reassign
        String temp = words[0];

        // circular shift each word
        for (int i = 0; i < words.length - 1; i++) {
            words[i] = words[i + 1];
        }
        // reassign first word to last element
        words[words.length - 1] = temp;

        // rebuild word array back into one line
        String wordString = "";
        for (int j = 0; j < words.length - 1; j++) {
            wordString += words[j] + " ";
        }
        wordString += words[words.length - 1];

        // add rebuilt line to array list
        linesList.add(wordString);

    }

    @Override
    public void write(String[] lines, KWIC panel) {
        // build new lines array from array list
        String[] newLines = linesList.toArray(new String[0]);

        // send through pipe to next filter
        output.read(newLines, panel);
    }

}
